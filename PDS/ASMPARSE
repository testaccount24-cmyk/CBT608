         TITLE 'ASMPARSE -- COMMAND PARSER'
***********************************************************************
*                                                                     *
*     ASMPARSE - GENERAL-PURPOSE PARSER                               *
*                                                                     *
*     ATTRIBUTES: RE-ENTRANT, RE-USABLE                               *
*                                                                     *
*     USAGE: ANY PROGRAM NEEDING TO DISSECT PARM STRINGS              *
*                                                                     *
*     DESCRIPTION:  THIS SUBROUTINE RETURNS INDIVIDUAL PARAMETERS     *
*     ONE AT A TIME FROM A PARM STRING.  STRING FORMAT IS FREE        *
*     FORM, WITH PARAMETERS SEPERATED BY COMMAS OR SPACES.  EACH      *
*     PARAMETER IS RETURNED AS A STRING.                              *
*                                                                     *
*     PARAMETERS MAY BE SIMPLE WORDS, LISTS IN PARENTHESES, OR        *
*     QUOTED STRINGS.  UPON RETURN FROM THIS ROUTINE, THE LOW-ORDER   *
*     BYTE OF REGISTER ZERO WILL CONTAIN:                             *
*                                                                     *
*     ' ' IF THE PARM WAS A WORD - DELIMITED BY SPACE, COMMA, OR (    *
*     ',' IF THE PARM WAS A COMMA PRECEEDED BY SPACE OR COMMA         *
*     '=' IF THE PARM WAS A WORD - DELIMITED BY '='                   *
*     '(' IF THE PARM WAS A LIST                                      *
*     '''' IF THE PARM WAS A STRING.                                  *
*                                                                     *
*     AS THE PARM IS ITSELF A STRING, SUBLISTS AND QUOTED STRINGS     *
*     MAY BE FURTHER DISSECTED BY USING THEM AS INPUT TO THIS         *
*     ROUTINE.                                                        *
*                                                                     *
*     CALLING SEQUENCE:                                               *
*                                                                     *
*     CALL ASMPARM,(PSTRING,PLOC,PVALUE<,PARMLEN>),VL                 *
*                                                                     *
*     PLOC IS A HALFWORD INITIALLY ZERO, UPDATED BY ASMPARSE SO       *
*     THAT SUCCESSIVE CALLS RETURN SUCCESSIVE PARMS FROM PSTRING.     *
*                                                                     *
*                                                                     *
*     PSTRING AND PVALUE ARE STRINGS ALA PASCAL AND PL/1 - I.E.       *
*     A HALFWORD LENGTH FOLLOWED BY THE STRING ITSELF.  PSTRING       *
*     IS NOT A STRING IF PARMLEN IS SPECIFIED, HOWEVER. PVALUE        *
*     SHOULD BE AS LONG AS PSTRING TO ENSURE THAT THE WORST CASE      *
*     PARAMETER WILL BE PROPERLY HANDLED.  IF IT IS MORE CONVENIENT,  *
*     THE STRING PART OF PVALUE MAY BE INITIALIZED TO BLANKS, ZEROES, *
*     ETC., SO THAT IT MAY BE TREATED AS A FIXED-LENGTH FIELD.        *
*                                                                     *
*     EXAMPLE:                                                        *
*                                                                     *
*     ZVALUE    DC    H'0'       ---- WILL BE SET BY ASMPARSE         *
*     ZFILENM   DC    CL44' '    ---- WILL BE OVERLAID BY PARM,       *
*                                     BUT APPEAR BLANK-PADDED TO      *
*                                     44 BYTES.                       *
*                                                                     *
*     RETURN CODES:                                                   *
*                                                                     *
*     R15 = 0 PARSED OK, R0 WAS SET, AND VALUE STORED IN PVALUE       *
*     R15 = 8 COULD NOT RETURN ANYTHING: AT OR PAST END OF PARM       *
*     R15 =12 END OF PARM AND NO ENDING DELIMITER FOUND. (PARM ERROR) *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
ASMPARSE CSECT
         SAVE  (14,12),,ASMPARSE-&SYSDATE-&SYSTIME
         LR    R12,R15
         USING ASMPARSE,R12
         LR    R8,R1               SAVE PARM POINTER
         USING DSPARM,R8
         L     R2,PARMPARM         INPUT STRING ADDRESS
*
         TM    PARMVAL,X'80'       PARMLEN PRESENT?
         BNZ   ISSTRING
         L     R3,PARMLEN          GET AN EXPLICIT LENGTH
         LH    R3,0(R3)
         LA    R3,0(R2,R3)         END OF FIELD ADDRESS
         B     GOTSTRNG
*
ISSTRING LH    R3,0(R2)            FIELD LENGTH
         LA    R3,2(R3,R2)  ----   END OF STRING ADDRESS
         LA    R2,2(R2)            POINT TO DATA PART
GOTSTRNG EQU   *
*
         L     R4,PARMPTR          PARSE POINTER
         AH    R2,0(R4)     ----   MAKE IT POINT TO NEXT PARSE POINT
*
         L     R7,PARMVAL   ----   VALUE FIELD ADDRESS
         XR    R6,R6        ----   VALUE LENGTH
         STH   R6,0(R7)            INITIALLY ZERO LENGTH
         LA    R7,2(R7)            POINT TO VALUE PART
*
*        SKIP LEADING SPACES
*
SKIPSP   CR    R2,R3
         BNL   RET8                NO MORE?
         CLI   0(R2),C' '
         BNE   SKIPSP1
         LA    R2,1(R2)
         B     SKIPSP
*
SKIPSP1  EQU   *
         XR    R0,R0
         IC    R0,0(R2)            SAVE DELIMITER
         CLI   0(R2),C'('
         BE    PAREN               PARENTHESIZED EXPRESSION
         CLI   0(R2),C','          1ST NONBLANK WAS A COMMA...
         BE    COMMA               OMITTED OPERAND - RETURN NULL VALUE
         CLI   0(R2),C''''
         BE    QUOTE               QUOTED EXPRESSION
         LA    R0,C' '             NOTHING SPECIAL
         SAVE  (0)                 SET RETURN DELIMITER
         EJECT
*---------------------------------------------------------------------*
*        SIMPLE OPERAND                                               *
*---------------------------------------------------------------------*
         SPACE 1
MVLOOP   EQU   *
         CLI   0(R2),C'('          WORD(VALUE) FORMAT?
         BE    RET0
         CLI   0(R2),C'='          WORD = VALUE FORMAT?
         BE    KWEQ
         CLI   0(R2),C' '
         BE    ENDPARM
         CLI   0(R2),C','
         BE    ENDPARM
         MVC   0(1,R7),0(R2)       APPEND TO VALUE
         LA    R6,1(R6)            INCREMENT LENGTH
         LA    R7,1(R7)            INCREMENT POINTER
         LA    R2,1(R2)            GO FOR NEXT
         CR    R2,R3
         BL    MVLOOP
         B     RET0
*
KWEQ     EQU   *  STORE KEYWORD=
         LA    R0,C'='
         SAVE  (0)
         LA    R2,1(R2)            GO FOR NEXT
         B     RET0
         EJECT
*---------------------------------------------------------------------*
*        PARENTHESIZED SUBLIST                                        *
*---------------------------------------------------------------------*
         SPACE 1
PAREN    DS    0H
         IC    R0,0(R2)            GET RETURN DELIMITER
         SAVE  (0)
         LA    R2,1(R2)            POINT PAST STARTING DELIMITER
         LA    R5,1                SUBPAREN LEVEL
*
PARENLP  EQU   *
         CR    R2,R3
         BNL   RET12               NO ENDING DELIMITER FOUND
         CLI   0(R2),C'('          SUBPAREN?
         BNE   PAREN01
         LA    R5,1(R5)
*
PAREN01  CLI   0(R2),C')'
         BNE   PAREN02             ENDING DELIMITER FOUND
         BCT   R5,PAREN02
         B     PARMDLM             COUNTED TO ZERO, EXIT
*
PAREN02  MVC   0(1,R7),0(R2)       APPEND TO VALUE
         LA    R6,1(R6)            INCREMENT LENGTH
         LA    R7,1(R7)            INCREMENT POINTER
         LA    R2,1(R2)            GO FOR NEXT
         B     PARENLP
         EJECT
*---------------------------------------------------------------------*
*        STRING IN SINGLE QUOTES                                      *
*---------------------------------------------------------------------*
         SPACE 1
QUOTE    DS    0H                  QUOTED SUBPARM
         IC    R0,0(R2)            GET RETURN DELIMITER
         SAVE  (0)
         LA    R2,1(R2)            POINT PAST STARTING DELIMITER
*
QUOTELP  EQU   *
         CR    R2,R3
         BNL   RET12               NO ENDING DELIMITER FOUND
         CLI   0(R2),C''''         POSSIBLE DELIMITER
         BNE   QUOTE1
         LA    R2,1(R2)
         CR    R2,R3               END OF PARM AND QUOTE
         BNL   RET0
         CLI   0(R2),C''''         DOUBLE QUOTE IS QUOTE
         BNE   PARMDLM1
QUOTE1   MVC   0(1,R7),0(R2)       APPEND TO VALUE
         LA    R6,1(R6)            INCREMENT LENGTH
         LA    R7,1(R7)            INCREMENT POINTER
         LA    R2,1(R2)            GO FOR NEXT
         B     QUOTELP
         EJECT
*---------------------------------------------------------------------*
*        COME HERE IF HAVE DELIMITER TO DROP AND MAYBE ALSO COMMA     *
*        OR SPACE                                                     *
*---------------------------------------------------------------------*
         SPACE 1
PARMDLM  LA    R2,1(R2)            POINT PAST DELIMITER
         CR    R2,R3
         BNL   RET0                END OF EVERYTHING
*---------------------------------------------------------------------*
*        COME HERE IF DROPPED DELIMITER AND MAY HAVE COMMA OR SPACE   *
*---------------------------------------------------------------------*
PARMDLM1 CLI   0(R2),C','          COMMA?
         BE    ENDPARM
         CLI   0(R2),C' '          SPACE?
         BNE   RET0
ENDPARM  LA    R2,1(R2)            DISCARD DELIMITER
         SPACE 2
*---------------------------------------------------------------------*
*        WHEN A PARM STRING IS IN THE FORM:                           *
*          VALUE1,,VALUE2                                             *
*        SENSE THE SECOND COMMA AS AN OMITTED OPERAND.  RETURN ',' IN *
*        REGISTER ZERO, AND RETURN VALUE AS A NULL STRING (LENGTH = 0)*
*        NOTE THAT VALUE1 , VALUE2 WILL ALSO SEE THE COMMA, THOUGH    *
*---------------------------------------------------------------------*
         SPACE 1
COMMA    EQU   ENDPARM
         SPACE 2
*
RET0     XR    R15,R15
         B     RETALL
*
RET8     LA    R15,8
         B     RETALL
*
RET12    LA    R15,12
*
RETALL   L     R1,PARMPARM         PARM START ADDRESS
         TM    PARMVAL,X'80'       WAS PARMLEN PRESENT?
         BZ    RETNBIAS            IF SO, NO BIAS
         AH    R1,=H'2'            BIAS FOR LENGTH PART
*
RETNBIAS SR    R2,R1               FROM CURRENT ADDRESS
         L     R3,PARMPTR
         STH   R2,0(R3)            UPDATE PARM POINTER
*
         L     R7,PARMVAL
         STH   R6,0(R7)            UPDATE OUTPUT LENGTH
         RETURN   (14,12),T,RC=(15)
         EJECT
DSPARM   DSECT
PARMPARM DS    F  A(PARM FIELD)  - A STRING UNLESS PARMLEN PRESENT
PARMPTR  DS    F  A(PARM POINTER 1/2W)
PARMVAL  DS    F  A(VALUE STRING)
PARMLEN  DS    F  A(L'PARMPARM)   A HALFWORD.  IF PRESENT, PARMPARM
*                 HAS NO LENGTH FIELD
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
